import os
import re
import subprocess
import sys

import requests
from rich.console import Console
from rich.prompt import Confirm, Prompt
from rich.table import Table
from rich.text import Text

from config import BOT_SERVICE

try:
    sys.stdin.reconfigure(encoding="utf-8")
    sys.stdout.reconfigure(encoding="utf-8")
except Exception:
    pass

if not os.environ.get("LC_ALL", "").endswith("UTF-8"):
    os.environ["LC_ALL"] = "en_US.UTF-8"
    os.environ["LANG"] = "en_US.UTF-8"

console = Console()

BACK_DIR = os.path.expanduser("~/.solobot_backup")
TEMP_DIR = os.path.expanduser("~/.solobot_tmp")
PROJECT_DIR = os.path.abspath(os.path.dirname(__file__))
IS_ROOT_DIR = PROJECT_DIR == "/root"

if IS_ROOT_DIR:
    console.print("[bold red]‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:[/bold red]")
    console.print(
        "[red]–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø—Ä—è–º–æ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ (/root).[/red]"
    )
    console.print("[red]–≠—Ç–æ –∫—Ä–∞–π–Ω–µ –æ–ø–∞—Å–Ω–æ –∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö![/red]")
    console.print(
        "[yellow]–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä /root/solobot[/yellow]"
    )
    console.print("[red]–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.[/red]")
    sys.exit(1)
GITHUB_REPO = "https://github.com/Vladless/Solo_bot"
SERVICE_NAME = BOT_SERVICE


def is_service_exists(service_name):
    result = subprocess.run(
        ["systemctl", "list-unit-files", service_name], capture_output=True, text=True
    )
    return service_name in result.stdout


def print_logo():
    logo = Text(
        """
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   
‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù   
""",
        style="bold cyan",
    )
    console.print(logo)


def backup_project():
    console.print("[yellow]üì¶ –°–æ–∑–¥–∞—ë—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø—Ä–æ–µ–∫—Ç–∞...[/yellow]")
    with console.status("[bold cyan]–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...[/bold cyan]"):
        subprocess.run(["rm", "-rf", BACK_DIR])
        subprocess.run(["cp", "-r", PROJECT_DIR, BACK_DIR])
    console.print(f"[green]‚úÖ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {BACK_DIR}[/green]")


def fix_permissions():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–∞–≤–∞ –Ω–∞ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    console.print("[yellow]üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–∞–≤–∞ –Ω–∞ —Ñ–∞–π–ª—ã...[/yellow]")
    try:
        user = os.getenv("SUDO_USER") or os.getenv("USER")
        if user:
            subprocess.run(
                ["sudo", "chown", "-R", f"{user}:{user}", PROJECT_DIR], check=True
            )

        subprocess.run(["sudo", "chmod", "-R", "u=rwX,go=rX", PROJECT_DIR], check=True)

        console.print("[green]‚úÖ –ü—Ä–∞–≤–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã[/green]")
    except subprocess.CalledProcessError as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∞–≤: {e}[/red]")


def install_rsync_if_needed():
    if subprocess.run(["which", "rsync"], capture_output=True).returncode != 0:
        console.print("[blue]üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ rsync...[/blue]")
        os.system("sudo apt update && sudo apt install -y rsync")


def clean_project_dir_safe(update_buttons=False, update_img=False):
    console.print("[yellow]üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º...[/yellow]")
    preserved_paths = {
        os.path.join(PROJECT_DIR, "config.py"),
        os.path.join(PROJECT_DIR, "handlers", "texts.py"),
        os.path.join(PROJECT_DIR, ".git"),
    }

    if not update_buttons:
        preserved_paths.add(os.path.join(PROJECT_DIR, "handlers", "buttons.py"))
    if not update_img:
        preserved_paths.add(os.path.join(PROJECT_DIR, "img"))
        for root, _, files in os.walk(os.path.join(PROJECT_DIR, "img")):
            for file in files:
                preserved_paths.add(os.path.join(root, file))

    for root, dirs, files in os.walk(PROJECT_DIR, topdown=False):
        for file in files:
            path = os.path.join(root, file)
            if path in preserved_paths:
                continue
            try:
                os.remove(path)
            except PermissionError:
                subprocess.run(["sudo", "rm", "-f", path])
            except Exception as e:
                console.print(f"[red]–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {path}: {e}[/red]")

        for dir in dirs:
            dir_path = os.path.join(root, dir)
            if os.path.abspath(dir_path) == os.path.join(PROJECT_DIR, "handlers"):
                continue
            if not update_img and os.path.abspath(dir_path) == os.path.join(PROJECT_DIR, "img"):
                continue
            try:
                os.rmdir(dir_path)
            except Exception:
                subprocess.run(["sudo", "rm", "-rf", dir_path])


def install_git_if_needed():
    if subprocess.run(["which", "git"], capture_output=True).returncode != 0:
        console.print("[blue]–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Git...[/blue]")
        os.system("sudo apt update && sudo apt install -y git")


def install_dependencies():
    console.print("[blue]üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...[/blue]")
    with console.status("[bold green]–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...[/bold green]"):
        try:
            if not os.path.exists("venv"):
                console.print(
                    "[yellow]‚ö†Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–æ–∑–¥–∞—é...[/yellow]"
                )
                subprocess.run("python3 -m venv venv", shell=True, check=True)

            subprocess.run(
                "bash -c 'source venv/bin/activate && pip install -r requirements.txt'",
                shell=True,
                check=True,
            )
        except subprocess.CalledProcessError:
            console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.[/red]")


def restart_service():
    if is_service_exists(SERVICE_NAME):
        console.print("[blue]üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã...[/blue]")
        with console.status("[bold yellow]–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...[/bold yellow]"):
            subprocess.run(f"sudo systemctl restart {SERVICE_NAME}", shell=True)
    else:
        console.print(f"[red]‚ùå –°–ª—É–∂–±–∞ {SERVICE_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.[/red]")


def get_local_version():
    path = os.path.join(PROJECT_DIR, "bot.py")
    if not os.path.isfile(path):
        return None
    with open(path, encoding="utf-8") as f:
        for line in f:
            match = re.search(r'version\s*=\s*["\'](.+?)["\']', line)
            if match:
                return match.group(1)
    return None


def get_remote_version(branch="main"):
    try:
        url = f"https://raw.githubusercontent.com/Vladless/Solo_bot/{branch}/bot.py"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            for line in response.text.splitlines():
                match = re.search(r'version\s*=\s*["\'](.+?)["\']', line)
                if match:
                    return match.group(1)
    except Exception:
        return None
    return None


def update_from_beta():
    update_cli_launcher()
    local_version = get_local_version()
    remote_version = get_remote_version(branch="dev")

    if local_version and remote_version:
        console.print(
            f"[cyan]üî¢ –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {local_version} | –ü–æ—Å–ª–µ–¥–Ω—è—è –≤ dev: {remote_version}[/cyan]"
        )
        if local_version == remote_version:
            if not Confirm.ask("[yellow]‚ùó –í–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞. –û–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë —Ä–∞–≤–Ω–æ?[/yellow]"):
                return
    else:
        console.print("[red]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏–∏.[/red]")

    if not Confirm.ask("[yellow]üîÅ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Solobot —Å –≤–µ—Ç–∫–∏ DEV[/yellow]"):
        return

    console.print("[red]‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ü–∞–ø–∫–∞ –±–æ—Ç–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞![/red]")
    if not Confirm.ask("[red]‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ?[/red]"):
        return

    update_buttons = Confirm.ask("[yellow]üîÑ –û–±–Ω–æ–≤–ª—è—Ç—å —Ñ–∞–π–ª buttons.py?[/yellow]", default=False)
    update_img = Confirm.ask("[yellow]üñº –û–±–Ω–æ–≤–ª—è—Ç—å –ø–∞–ø–∫—É img?[/yellow]", default=False)

    backup_project()
    install_git_if_needed()
    install_rsync_if_needed()

    os.chdir(PROJECT_DIR)
    console.print("[cyan]üìÖ –ö–ª–æ–Ω–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...[/cyan]")
    subprocess.run(["rm", "-rf", TEMP_DIR])

    if os.system(f"git clone --depth=1000000 -b dev {GITHUB_REPO} {TEMP_DIR}") != 0:
        console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.[/red]")
        return

    subprocess.run(["sudo", "rm", "-rf", os.path.join(PROJECT_DIR, "venv")])
    clean_project_dir_safe(update_buttons=update_buttons, update_img=update_img)

    exclude_options = ""
    if not update_img:
        exclude_options += "--exclude=img "
    if not update_buttons:
        exclude_options += "--exclude=handlers/buttons.py "

    subprocess.run(f"rsync -a {exclude_options} {TEMP_DIR}/ {PROJECT_DIR}/", shell=True)

    if os.path.exists(os.path.join(TEMP_DIR, ".git")):
        subprocess.run(["cp", "-r", os.path.join(TEMP_DIR, ".git"), PROJECT_DIR])

    subprocess.run(["rm", "-rf", TEMP_DIR])

    fix_permissions()
    install_dependencies()
    restart_service()
    console.print("[green]‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –≤–µ—Ç–∫–∏ dev –∑–∞–≤–µ—Ä—à–µ–Ω–æ.[/green]")


def update_from_release():
    update_cli_launcher()
    if not Confirm.ask(
        "[yellow]üîÅ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Solobot –¥–æ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–ª–∏–∑–æ–≤[/yellow]"
    ):
        return

    console.print("[red]‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ü–∞–ø–∫–∞ –±–æ—Ç–∞ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞![/red]")
    console.print("[red]  –ò—Å–∫–ª—é—á–µ–Ω–∏—è: –ø–∞–ø–∫–∞ img –∏ —Ñ–∞–π–ª handlers/buttons.py[/red]")
    if not Confirm.ask("[red]‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?[/red]"):
        return

    update_buttons = Confirm.ask("[yellow]üîÑ –û–±–Ω–æ–≤–ª—è—Ç—å —Ñ–∞–π–ª buttons.py?[/yellow]", default=False)
    update_img = Confirm.ask("[yellow]üñº –û–±–Ω–æ–≤–ª—è—Ç—å –ø–∞–ø–∫—É img?[/yellow]", default=False)

    backup_project()
    install_git_if_needed()
    install_rsync_if_needed()

    try:
        response = requests.get(
            "https://api.github.com/repos/Vladless/Solo_bot/releases", timeout=10
        )
        releases = response.json()[:3]
        tag_choices = [r["tag_name"] for r in releases]

        if not tag_choices:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–ª–∏–∑–æ–≤")

        console.print("\n[bold green]–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–ª–∏–∑—ã:[/bold green]")
        for idx, tag in enumerate(tag_choices, 1):
            console.print(f"[cyan]{idx}.[/cyan] {tag}")

        selected = Prompt.ask(
            "[bold blue]–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–ª–∏–∑–∞[/bold blue]",
            choices=[str(i) for i in range(1, len(tag_choices) + 1)],
        )
        tag_name = tag_choices[int(selected) - 1]

        if not Confirm.ask(
            f"[yellow]üîÅ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–µ–ª–∏–∑–∞ {tag_name}[/yellow]"
        ):
            return

        console.print(f"[cyan]üì• –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ª–∏–∑ {tag_name} –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É...[/cyan]")
        subprocess.run(["rm", "-rf", TEMP_DIR])
        subprocess.run(
            f"git clone --branch {tag_name} {GITHUB_REPO} {TEMP_DIR}",
            shell=True,
            check=True,
        )

        console.print("[red]‚ö†Ô∏è –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–∞![/red]")
        subprocess.run(["sudo", "rm", "-rf", os.path.join(PROJECT_DIR, "venv")])
        clean_project_dir_safe(update_buttons=update_buttons, update_img=update_img)

        exclude_options = ""
        if not update_img:
            exclude_options += "--exclude=img "
        if not update_buttons:
            exclude_options += "--exclude=handlers/buttons.py "

        subprocess.run(f"rsync -a {exclude_options} {TEMP_DIR}/ {PROJECT_DIR}/", shell=True)

        if os.path.exists(os.path.join(TEMP_DIR, ".git")):
            subprocess.run(["cp", "-r", os.path.join(TEMP_DIR, ".git"), PROJECT_DIR])

        subprocess.run(["rm", "-rf", TEMP_DIR])

        fix_permissions()
        install_dependencies()
        restart_service()
        console.print(f"[green]‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ —Ä–µ–ª–∏–∑–∞ {tag_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.[/green]")

    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}[/red]")


def show_update_menu():
    if IS_ROOT_DIR:
        console.print("[red]‚õî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ /root[/red]")
        console.print(
            "[yellow]–ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É[/yellow]"
        )
        return

    table = Table(title="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", title_style="bold green")
    table.add_column("‚Ññ", justify="center", style="cyan", no_wrap=True)
    table.add_column("–ò—Å—Ç–æ—á–Ω–∏–∫", style="white")
    table.add_row("1", "–û–±–Ω–æ–≤–∏—Ç—å –¥–æ BETA")
    table.add_row("2", "–û–±–Ω–æ–≤–∏—Ç—å –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞")
    table.add_row("3", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")

    console.print(table)
    choice = Prompt.ask("[bold blue]–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä[/bold blue]", choices=["1", "2", "3"])

    if choice == "1":
        update_from_beta()
    elif choice == "2":
        update_from_release()


def show_menu():
    table = Table(
        title="Solobot CLI v0.2.0", title_style="bold magenta", header_style="bold blue"
    )
    table.add_column("‚Ññ", justify="center", style="cyan", no_wrap=True)
    table.add_column("–û–ø–µ—Ä–∞—Ü–∏—è", style="white")
    table.add_row("1", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (systemd)")
    table.add_row("2", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é: venv/bin/python main.py")
    table.add_row("3", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (systemd)")
    table.add_row("4", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ (systemd)")
    table.add_row("5", "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ (80 —Å—Ç—Ä–æ–∫)")
    table.add_row("6", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
    table.add_row("7", "–û–±–Ω–æ–≤–∏—Ç—å Solobot")
    table.add_row("8", "–û–±–Ω–æ–≤–∏—Ç—å CLI –ª–∞—É–Ω—á–µ—Ä")
    table.add_row("9", "–í—ã—Ö–æ–¥")
    console.print(table)


def update_cli_launcher():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç CLI –ª–∞—É–Ω—á–µ—Ä —Å dev –≤–µ—Ç–∫–∏"""
    console.print("[yellow]üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CLI –ª–∞—É–Ω—á–µ—Ä–∞...[/yellow]")
    try:
        url = "https://raw.githubusercontent.com/Vladless/Solo_bot/dev/cli_launcher.py"
        response = requests.get(url, timeout=10)

        if response.status_code == 200:
            with open(
                os.path.join(PROJECT_DIR, "cli_launcher.py"), "w", encoding="utf-8"
            ) as f:
                f.write(response.text)
            console.print("[green]‚úÖ CLI –ª–∞—É–Ω—á–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω[/green]")
            os.chmod(os.path.join(PROJECT_DIR, "cli_launcher.py"), 0o755)
        else:
            console.print("[red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π CLI[/red]")
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ CLI: {e}[/red]")


def main():
    os.chdir(PROJECT_DIR)
    print_logo()
    try:
        while True:
            show_menu()
            choice = Prompt.ask(
                "[bold blue]–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è[/bold blue]",
                choices=[str(i) for i in range(1, 10)],
            )
            if choice == "1":
                if is_service_exists(SERVICE_NAME):
                    subprocess.run(["sudo", "systemctl", "start", SERVICE_NAME])
                else:
                    console.print(f"[red]‚ùå –°–ª—É–∂–±–∞ {SERVICE_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.[/red]")
            elif choice == "2":
                if Confirm.ask(
                    "[green]–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å main.py –≤—Ä—É—á–Ω—É—é?[/green]"
                ):
                    subprocess.run(["venv/bin/python", "main.py"])
            elif choice == "3":
                if is_service_exists(SERVICE_NAME):
                    if Confirm.ask(
                        "[yellow]–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞?[/yellow]"
                    ):
                        subprocess.run(["sudo", "systemctl", "restart", SERVICE_NAME])
                else:
                    console.print(f"[red]‚ùå –°–ª—É–∂–±–∞ {SERVICE_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.[/red]")
            elif choice == "4":
                if is_service_exists(SERVICE_NAME):
                    if Confirm.ask(
                        "[red]–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞?[/red]"
                    ):
                        subprocess.run(["sudo", "systemctl", "stop", SERVICE_NAME])
                else:
                    console.print(f"[red]‚ùå –°–ª—É–∂–±–∞ {SERVICE_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.[/red]")
            elif choice == "5":
                if is_service_exists(SERVICE_NAME):
                    subprocess.run(
                        [
                            "sudo",
                            "journalctl",
                            "-u",
                            SERVICE_NAME,
                            "-n",
                            "80",
                            "--no-pager",
                        ]
                    )
                else:
                    console.print(f"[red]‚ùå –°–ª—É–∂–±–∞ {SERVICE_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.[/red]")
            elif choice == "6":
                if is_service_exists(SERVICE_NAME):
                    subprocess.run(["sudo", "systemctl", "status", SERVICE_NAME])
                else:
                    console.print(f"[red]‚ùå –°–ª—É–∂–±–∞ {SERVICE_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.[/red]")
            elif choice == "7":
                show_update_menu()
            elif choice == "8":
                if Confirm.ask("[yellow]–û–±–Ω–æ–≤–∏—Ç—å CLI –ª–∞—É–Ω—á–µ—Ä —Å dev –≤–µ—Ç–∫–∏?[/yellow]"):
                    update_cli_launcher()
            elif choice == "9":
                if Confirm.ask("[yellow]–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å CLI –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º?[/yellow]"):
                    update_cli_launcher()
                console.print("[bold cyan]–í—ã—Ö–æ–¥ –∏–∑ CLI. –£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è![/bold cyan]")
                break
    except KeyboardInterrupt:
        console.print("\n[bold red]‚èπ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ. –í—ã—Ö–æ–¥ –∏–∑ CLI.[/bold red]")


if __name__ == "__main__":
    main()
