from datetime import datetime, timedelta

import pytz
from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession
from collections import Counter


from bot import bot
from config import ADMIN_ID
from database import (
    count_active_keys,
    count_total_keys,
    count_total_referrals,
    count_total_users,
    count_trial_keys,
    count_users_registered_between,
    count_users_registered_since,
    count_users_updated_today,
    get_tariff_distribution,
    get_tariff_names,
    get_tariff_groups,
    get_tariff_durations,
    sum_payments_between,
    sum_payments_since,
    sum_total_payments,
    count_hot_leads
)
from filters.admin import IsAdminFilter
from logger import logger
from utils.csv_export import (
    export_hot_leads_csv,
    export_keys_csv,
    export_payments_csv,
    export_users_csv,
)

from ..panel.keyboard import AdminPanelCallback, build_admin_back_kb
from .keyboard import build_stats_kb

router = Router()


@router.callback_query(AdminPanelCallback.filter(F.action == "stats"), IsAdminFilter())
async def handle_stats(callback_query: CallbackQuery, session: AsyncSession):
    try:
        now = datetime.utcnow()
        today = now.date()
        moscow_tz = pytz.timezone("Europe/Moscow")

        total_users = await count_total_users(session)
        users_updated_today = await count_users_updated_today(session, today)
        registrations_today = await count_users_registered_since(session, today)
        registrations_yesterday = await count_users_registered_between(
            session, today - timedelta(days=1), today
        )
        registrations_week = await count_users_registered_since(
            session, today - timedelta(days=today.weekday())
        )
        registrations_month = await count_users_registered_since(
            session, today.replace(day=1)
        )
        last_month_start = (today.replace(day=1) - timedelta(days=1)).replace(day=1)
        registrations_last_month = await count_users_registered_between(
            session, last_month_start, today.replace(day=1)
        )

        total_keys = await count_total_keys(session)
        active_keys = await count_active_keys(session)
        expired_keys = total_keys - active_keys
        trial_keys_count = await count_trial_keys(session)

        tariff_counts, no_tariff_keys = await get_tariff_distribution(session, include_unbound=True)
        tariff_names = await get_tariff_names(session, [tid for tid, _ in tariff_counts])
        tariff_groups = await get_tariff_groups(session, [tid for tid, _ in tariff_counts])
        tariff_durations = await get_tariff_durations(session, [tid for tid, _ in tariff_counts])

        grouped_tariffs = {}
        for tid, count in tariff_counts:
            group = tariff_groups.get(tid, "unknown")
            if group not in grouped_tariffs:
                grouped_tariffs[group] = []
            grouped_tariffs[group].append((tid, count))

        tariff_stats_text = ""
        duration_buckets = Counter()
        now_ts = int(datetime.utcnow().timestamp() * 1000)

        for key in no_tariff_keys:
            duration_days = round((key["expiry_time"] - now_ts) / (1000 * 60 * 60 * 24))
            if 25 <= duration_days <= 35:
                bucket = "–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞: 1 –º–µ—Å"
            elif 80 <= duration_days <= 100:
                bucket = "–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞: 3 –º–µ—Å"
            elif 170 <= duration_days <= 200:
                bucket = "–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞: 6 –º–µ—Å"
            elif 350 <= duration_days <= 380:
                bucket = "–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞: 12 –º–µ—Å"
            else:
                bucket = "–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞: –ø—Ä–æ—á–µ–µ"
            duration_buckets[bucket] += 1

        bucket_order = {
            "–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞: 1 –º–µ—Å": 1,
            "–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞: 3 –º–µ—Å": 2,
            "–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞: 6 –º–µ—Å": 3,
            "–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞: 12 –º–µ—Å": 4,
            "–ë–µ–∑ —Ç–∞—Ä–∏—Ñ–∞: –ø—Ä–æ—á–µ–µ": 5
        }
        sorted_buckets = sorted(
            duration_buckets.items(),
            key=lambda x: bucket_order.get(x[0], 999)
        )

        for name, count in sorted_buckets:
            tariff_stats_text += f"‚îú {name}: <b>{count}</b>\n"

        for group, tariffs in grouped_tariffs.items():
            tariff_stats_text += f"–¢–∞—Ä–∏—Ñ {group}\n"
            sorted_tariffs = sorted(
                tariffs,
                key=lambda x: tariff_durations.get(x[0], 0)
            )
            for tid, count in sorted_tariffs:
                name = tariff_names.get(tid, f"ID {tid}")
                tariff_stats_text += f" ‚îú {name}: <b>{count}</b>\n"

        tariff_stats_text = (
            "‚îî –ü–æ —Ç–∞—Ä–∏—Ñ–∞–º –∏ —Å—Ä–æ–∫–∞–º:\n" + tariff_stats_text
            if tariff_stats_text
            else "‚îî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º\n"
        )

        total_referrals = await count_total_referrals(session)

        total_payments_today = await sum_payments_since(session, today)
        total_payments_yesterday = await sum_payments_between(
            session, today - timedelta(days=1), today
        )
        total_payments_week = await sum_payments_since(
            session, today - timedelta(days=today.weekday())
        )
        total_payments_month = await sum_payments_since(session, today.replace(day=1))
        total_payments_last_month = await sum_payments_between(
            session, last_month_start, today.replace(day=1)
        )
        total_payments_all_time = await sum_total_payments(session)
        hot_leads_count = await count_hot_leads(session)

        update_time = datetime.now(moscow_tz).strftime("%d.%m.%y %H:%M:%S")

        stats_message = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"<blockquote>"
            f"‚îú üóìÔ∏è –ó–∞ –¥–µ–Ω—å: <b>{registrations_today}</b>\n"
            f"‚îú üóìÔ∏è –í—á–µ—Ä–∞: <b>{registrations_yesterday}</b>\n"
            f"‚îú üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é: <b>{registrations_week}</b>\n"
            f"‚îú üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü: <b>{registrations_month}</b>\n"
            f"‚îú üìÖ –ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü: <b>{registrations_last_month}</b>\n"
            f"‚îî üåê –í—Å–µ–≥–æ: <b>{total_users}</b>\n"
            f"</blockquote>\n"
            f"üí° <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            f"‚îî üë• –°–µ–≥–æ–¥–Ω—è –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã: <b>{users_updated_today}</b>\n\n"
            f"ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>\n"
            f"‚îî üë• –í—Å–µ–≥–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–æ: <b>{total_referrals}</b>\n\n"
            f"üîê <b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>\n"
            f"<blockquote>"
            f"‚îú üì¶ –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: <b>{total_keys}</b>\n"
            f"‚îú ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{active_keys}</b>\n"
            f"‚îú ‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: <b>{expired_keys}</b>\n"
            f"‚îú üß™ –¢—Ä–∏–∞–ª—å–Ω—ã—Ö: <b>{trial_keys_count}</b>\n"
            f"{tariff_stats_text}"
            f"</blockquote>\n"
            f"üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
            f"<blockquote>"
            f"‚îú üìÖ –ó–∞ –¥–µ–Ω—å: <b>{total_payments_today} ‚ÇΩ</b>\n"
            f"‚îú üìÜ –í—á–µ—Ä–∞: <b>{total_payments_yesterday} ‚ÇΩ</b>\n"
            f"‚îú üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é: <b>{total_payments_week} ‚ÇΩ</b>\n"
            f"‚îú üìÜ –ó–∞ –º–µ—Å—è—Ü: <b>{total_payments_month} ‚ÇΩ</b>\n"
            f"‚îú üìÜ –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü: <b>{total_payments_last_month} ‚ÇΩ</b>\n"
            f"‚îî üè¶ –í—Å–µ–≥–æ: <b>{total_payments_all_time} ‚ÇΩ</b>\n"
            f"</blockquote>\n"
            f"üî• <b>–ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã: {hot_leads_count}</b>\n"
            f"‚è±Ô∏è <i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</i> <code>{update_time}</code>"
        )

        await callback_query.message.edit_text(
            text=stats_message, reply_markup=build_stats_kb()
        )

    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            logger.error(f"Error in user_stats_menu: {e}")
    except Exception as e:
        logger.error(f"Error in user_stats_menu: {e}")
        await callback_query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True
        )


@router.callback_query(
    AdminPanelCallback.filter(F.action == "stats_export_users_csv"), IsAdminFilter()
)
async def handle_export_users_csv(callback_query: CallbackQuery, session: AsyncSession):
    kb = build_admin_back_kb("stats")
    try:
        export = await export_users_csv(session)
        await callback_query.message.answer_document(
            document=export, caption="üìÖ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback_query.message.edit_text(text=f"‚ùó –û—à–∏–±–∫–∞: {e}", reply_markup=kb)


@router.callback_query(
    AdminPanelCallback.filter(F.action == "stats_export_payments_csv"), IsAdminFilter()
)
async def handle_export_payments_csv(
    callback_query: CallbackQuery, session: AsyncSession
):
    kb = build_admin_back_kb("stats")
    try:
        export = await export_payments_csv(session)
        await callback_query.message.answer_document(
            document=export, caption="üìÖ –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞—Ç–µ–∂–µ–π –≤ CSV"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        await callback_query.message.edit_text(text=f"‚ùó –û—à–∏–±–∫–∞: {e}", reply_markup=kb)


@router.callback_query(
    AdminPanelCallback.filter(F.action == "stats_export_hot_leads_csv"), IsAdminFilter()
)
async def handle_export_hot_leads_csv(
    callback_query: CallbackQuery, session: AsyncSession
):
    kb = build_admin_back_kb("stats")
    try:
        export = await export_hot_leads_csv(session)
        await callback_query.message.answer_document(
            document=export, caption="üìÖ –≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ä—è—â–∏—Ö –ª–∏–¥–æ–≤"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≥–æ—Ä—è—â–∏—Ö –ª–∏–¥–æ–≤: {e}")
        await callback_query.message.edit_text(text=f"‚ùó –û—à–∏–±–∫–∞: {e}", reply_markup=kb)


@router.callback_query(
    AdminPanelCallback.filter(F.action == "stats_export_keys_csv"), IsAdminFilter()
)
async def handle_export_keys_csv(callback_query: CallbackQuery, session: AsyncSession):
    kb = build_admin_back_kb("stats")
    try:
        export = await export_keys_csv(session)
        await callback_query.message.answer_document(
            document=export, caption="üìÖ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –≤ CSV"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        await callback_query.message.edit_text(text=f"‚ùó –û—à–∏–±–∫–∞: {e}", reply_markup=kb)


async def send_daily_stats_report(session: AsyncSession):
    try:
        now_moscow = datetime.now(pytz.timezone("Europe/Moscow"))
        update_time = now_moscow.strftime("%d.%m.%y %H:%M")

        today = (
            pytz.timezone("Europe/Moscow")
            .localize(datetime.combine((now_moscow - timedelta(days=1)).date(), datetime.min.time()))
            .astimezone(pytz.UTC)
            .replace(tzinfo=None)
        )

        registrations_today = await count_users_registered_since(session, today)
        payments_today = await sum_payments_since(session, today)
        active_keys = await count_active_keys(session)

        text = (
            "üóìÔ∏è <b>–°–≤–æ–¥–∫–∞ –∑–∞ –¥–µ–Ω—å</b>\n\n"
            f"üë§ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{registrations_today}</b>\n"
            f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ: <b>{payments_today} ‚ÇΩ</b>\n"
            f"üîê –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: <b>{active_keys}</b>\n\n"
            f"‚è±Ô∏è <i>{update_time} –ú–°–ö</i>"
        )

        for admin_id in ADMIN_ID:
            await bot.send_message(admin_id, text)

    except Exception as e:
        logger.error(f"[Stats] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


@router.message(F.text == "–°–≤–æ–¥–∫–∞", IsAdminFilter())
async def test_stats_command(message: Message, session: AsyncSession):
    await send_daily_stats_report(session)
